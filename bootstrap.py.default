from smart.models import *
from bootstrap_utils import interpolated_postgres_load, put_rdf
from django.conf import settings
import os

# Some basic apps and a couple of accounts to get things going.

MachineApp.objects.create(name='chrome',
                          consumer_key='chrome',
                          secret='chrome',
                          app_type='chrome',
                          email='chrome@apps.smart-project.org')

PHA.objects.create(start_url_template= 'http://localhost:8001/meds.html?record_id={record_id}',
                   callback_url = 'http://localhost:8001/auth/after',
                   has_ui = True,
                   frameable = True,
                   description = 'List patient\'s medications plus supplementary details',
                   consumer_key = 'smart-fg-app',
                   secret = 'smartapp-secret',
                   name ='MedList',
                   email='medlist@apps.smart.org')

PHA.objects.create(start_url_template= 'http://localhost:8001/problems.html?record_id={record_id}',
                   callback_url = 'http://localhost:8001/auth/after',
                   has_ui = True,
                   frameable = True,
                   description = 'Interactive Problem List Editor',
                   consumer_key = 'smart-problems-app',
                   secret = 'smartapp-secret',
                   name ='Problems',
                   email='smart-problems@apps.smart.org')



PHA.objects.create(start_url_template= 'http://localhost:8001/statin.html?record_id={record_id}',
                   callback_url = 'http://localhost:8001/auth/after',
                   has_ui = True,
                   frameable = True,
                   description = 'States whether patient is taking a statin.',
                   consumer_key = 'smart-statin-app',
                   secret = 'smartapp-secret',
                   name ='Are-Statins-On-Board?',
                   email='are-statins-on-board@apps.smart.org')


PHA.objects.create(start_url_template= 'http://localhost:8002/smart/start_auth?record_id={record_id}',
                   callback_url = 'http://localhost:8002/smart/after_auth',
                   has_ui = True,
                   frameable = True,
                   description = 'Keeps SMArt updated from a SureScripts feed (long-term, runs in background)',
                   consumer_key = 'smart-bg-app',
                   secret = 'smartapp-secret',
                   name ='SMArt Connector',
                   email='surescripts-sync@apps.smart.org',
                   background_p=True)

PHA.objects.create(start_url_template= 'http://localhost:8001/api_playground.html',
                   callback_url = 'http://localhost:8001/auth/after',
                   has_ui = True,
                   frameable = True,
                   description = 'Experiment with the SMArt API in a controlled environment',
                   consumer_key = 'api-playground-app',
                   secret = 'smartapp-secret',
                   name ='API Playground',
                   email='api-playground@apps.smart.org',
                   background_p=False)


PHA.objects.create(start_url_template= 'http://localhost:8000/index.html',
                   callback_url = 'http://localhost:8000/after_auth.html',
                   has_ui = True,
                   frameable = True,
                   description = 'Points to a locally-hosted app for development.',
                   consumer_key = 'developers-sandbox-app',
                   secret = 'smartapp-secret',
                   name ='Developers Sandbox',
                   email='developer-sandbox@apps.smart.org',
                   background_p=False)


a = Account.objects.create(email = 'benadida@smart.org', full_name='Ben Adida', contact_email = 'ben@adida.net')
a.set_username_and_password(username='benadida', password='test')

a2 = Account.objects.create(email = 'joshmandel@smart.org', full_name='Josh Mandel', contact_email = 'jmandel@gmail.com')
a2.set_username_and_password(username='joshmandel', password='test')

a2 = Account.objects.create(email = 'test@smart.org', full_name='SMArt Developer', contact_email = 'jmandel@gmail.com')
a2.set_username_and_password(username='developer', password='test')

# create a couple of records

ss_1 = Record.objects.create(full_name = 'Hiram Bach')
ss_2 = Record.objects.create(full_name = 'Bert Schnur')
ss_4 = Record.objects.create(full_name = 'Bruce Paltrow')
ss_5 = Record.objects.create(full_name = 'David Cross')
ss_6 = Record.objects.create(full_name = 'Hans Bergermeister')
ss_7 = Record.objects.create(full_name = 'Mary Paltrow')
ss_8 = Record.objects.create(full_name = 'Tad Dockendorf')
ss_9 = Record.objects.create(full_name = 'Nora Bergermeister')
ss_10 = Record.objects.create(full_name = 'Bob Odenkirk')
ss_11 = Record.objects.create(full_name = 'Douglas Richardson')

import RDF

u = settings.DATABASE_USER
p =settings.DATABASE_PASSWORD

bios = """<?xml version="1.0"?>

<rdf:RDF
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:sp="http://smartplatforms.org/"
xmlns:foaf="http://xmlns.com/foaf/0.1/"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:dcterms="http://purl.org/dc/terms/"
xmlns:bio="http://purl.org/vocab/bio/0.1/"
>



<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Bach</foaf:familyName>
  <foaf:givenName>Hiram</foaf:givenName>
  <foaf:gender>male</foaf:gender>
  <sp:zipcode>02543</sp:zipcode>
  <sp:birthday>19631215</sp:birthday>
</rdf:Description>

<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Schnur</foaf:familyName>
  <foaf:givenName>Bert</foaf:givenName>
  <foaf:gender>male</foaf:gender>
  <sp:zipcode>63050</sp:zipcode>
  <sp:birthday>19450419</sp:birthday>
</rdf:Description>

<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Paltrow</foaf:familyName>
  <foaf:givenName>Bruce</foaf:givenName>
  <foaf:gender>male</foaf:gender>
  <sp:zipcode>54360</sp:zipcode>
  <sp:birthday>19450201</sp:birthday>
</rdf:Description>

<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Cross</foaf:familyName>
  <foaf:givenName>David</foaf:givenName>
  <foaf:gender>male</foaf:gender>
  <sp:zipcode>08608</sp:zipcode>
  <sp:birthday>19720910</sp:birthday>
</rdf:Description>

<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Bergermeister</foaf:familyName>
  <foaf:givenName>Hans</foaf:givenName>
  <foaf:gender>male</foaf:gender>
  <sp:zipcode>19013</sp:zipcode>
  <sp:birthday>19631201</sp:birthday>
</rdf:Description>

<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Paltrow</foaf:familyName>
  <foaf:givenName>Mary</foaf:givenName>
  <foaf:gender>female</foaf:gender>
  <sp:zipcode>54360</sp:zipcode>
  <sp:birthday>19510618</sp:birthday>
</rdf:Description>

<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Dockendorf</foaf:familyName>
  <foaf:givenName>Tad</foaf:givenName>
  <foaf:gender>male</foaf:gender>
  <sp:zipcode>82001</sp:zipcode>
  <sp:birthday>19750705</sp:birthday>
</rdf:Description>

<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Bergermeister</foaf:familyName>
  <foaf:givenName>Nora</foaf:givenName>
  <foaf:gender>female</foaf:gender>
  <sp:zipcode>19013</sp:zipcode>
  <sp:birthday>19641009</sp:birthday>
</rdf:Description>

<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Odenkirk</foaf:familyName>
  <foaf:givenName>Bob</foaf:givenName>
  <foaf:gender>male</foaf:gender>
  <sp:zipcode>90001</sp:zipcode>
  <sp:birthday>19591225</sp:birthday>
</rdf:Description>

<rdf:Description rdf:about="http://smartplatforms.org/records/%s">
  <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
  <foaf:familyName>Richardson</foaf:familyName>
  <foaf:givenName>Douglas</foaf:givenName>
  <foaf:gender>female</foaf:gender>
  <sp:zipcode>01040</sp:zipcode>
  <sp:birthday>19680901</sp:birthday>
</rdf:Description>

</rdf:RDF>""" % ( 
 ss_1.id,
 ss_2.id,
 ss_4.id, # for some reasont the SS Test set has no element 3(?) -JM
 ss_5.id,
 ss_6.id,
 ss_7.id,
 ss_8.id,
 ss_9.id,
 ss_10.id,
 ss_11.id)

demographic_url  = "%s/statements"%settings.DEMOGRAPHIC_SPARQL_ENDPOINT
put_rdf(demographic_url, bios)


interpolated_postgres_load(
    os.path.join(settings.APP_HOME, "codingsystems/data/load-snomedctcore.sql"),
    {"snomed_core_data": 
     os.path.join(settings.APP_HOME, 
                  "codingsystems/data/complete/SNOMEDCT_CORE_SUBSET_201005.utf8.txt")},
    settings.DATABASE_NAME,
    settings.DATABASE_USER
)
